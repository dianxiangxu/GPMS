
/* Controltag Loader for E*TRADE - ReadOnly */
(function(){
  var debugging = /kxdebug/.test(location);
  var log = function() {
    // It's a flag, so if it's there, then it means debug.
    debugging && window.console && console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = document.createElement('script');
    node.async = true;  // This is just to be friendly.
    node.src = url;

    // Connect to both in case we're in older IE.
    node.onload = node.onreadystatechange = function() {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  // Mark the callback, so we don't load it twice on accident.
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  // ControlTag simply crashes when opening a website from Twitter browser on
  // iOS, temporarily disable CT when Twitter for iPhone is detected until they
  // fix this (works fine with other twitter client though)
  if (/Twitter for iPhone/.test(window.navigator.userAgent || '')) return;

  var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 69, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 43649, "name": "eTrade IXI (via LiveRamp) provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n      var liveramp_url = 'https://idsync.rlcdn.com/379708.gif?partner_uid=' + kuid;\r\n      var i = new Image();\r\n      i.src = liveramp_url;      \r\n  }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 21, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 42148, "name": "Acxiom S2S provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//loadm.exelator.com/load\",\r\n      data: {\r\n          _kdpid: 'e4942ff0-4070-4896-a7ef-e6a5a30ce9f9',\r\n          buid: kuid,\r\n          p: '204',\r\n          g: '270',\r\n          j: '0'\r\n      }});\r\n  }\r\n  })();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 11, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 42150, "name": "eXelate Media provider tag"}, {"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "internal": 1, "template_replacement": 1, "execution_results": null, "tier": 1, "library_tag_config": {}, "content_type": "html", "timing": "onload", "method": "document", "type": "library", "id": 42157, "name": "Krux Track Social"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 6, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 42158, "name": "Technographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 14, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 42159, "name": "Krux Geographic Data provider tag"}, {"content": "<script>\r\n    (function () {\r\n        var criteria = [{\r\n            'url': '//googleads.g.doubleclick.net/pagead/viewthroughconversion/'\r\n                   +'1069016414/?value=1.00&amp;currency_code=USD'\r\n                   +'&amp;label=uYv2CJeH214Q3srf_QM&amp;guid=ON&amp;script=0',\r\n            'segs': 'ptdjxl4pm'\r\n        }, {\r\n            'url': '//googleads.g.doubleclick.net/pagead/viewthroughconversion/'\r\n                   +'1069016414/?value=100&amp;currency_code=USD&amp;'\r\n                   +'label=jCU8CJu46V4Q3srf_QM&amp;guid=ON&amp;script=0',\r\n            'segs': 'ps8yzecay'\r\n        }, {\r\n            'url': '//googleads.g.doubleclick.net/pagead/viewthroughconversion/'\r\n                   +'1069016414/?value=1.00&amp;currency_code=USD&amp;'\r\n                   +'label=kdubCN3B5l4Q3srf_QM&amp;guid=ON&amp;script=0',\r\n            'segs': 'prcgjp8ez'\r\n        }, {\r\n            'url': '//googleads.g.doubleclick.net/pagead/viewthroughconversion/'\r\n                   +'1069016414/?value=1.00&amp;currency_code=USD&amp;'\r\n                   +'label=f-e9CNnV314Q3srf_QM&amp;guid=ON&amp;script=0',\r\n            'segs': 'ptcqk0ey6'\r\n        }];\r\n        var userSegs = Krux('get', 'user_segments');\r\n        var prefix   = window.location.protocol == 'https:' ? 'https:' : 'http:';\r\n        for (var i = 0, l = userSegs.length; i < l; i++) {\r\n            for (var j = 0; j < criteria.length; j++) {\r\n                var c = criteria[j];\r\n                if (c.segs.indexOf(userSegs[i]) !== -1) {\r\n                    (new Image()).src = prefix + c.url;\r\n                }\r\n            }\r\n        }\r\n    })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "criteria": [{"operator": "contains", "name": "url", "value": "?kxtest"}], "timing": "onload", "method": "document", "type": "publisher", "id": 66577, "name": "RLSA Pixels"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n      var liveramp_url = 'https://idsync.rlcdn.com/379708.gif?partner_uid=' + kuid;\r\n      var i = new Image();\r\n      i.src = liveramp_url;     \r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 43539, "name": "LiveRamp Custom IXI Usermatch"}, {"content": "<script>\r\n(function() {\r\n\tvar currentDateTime = (window.Krux && Krux('get', 'now'))  || new Date();\r\n\tvar DAYSOFWEEK = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n\tvar currentTimePeriod;\r\n\r\n\tvar currentDateOfMonth = currentDateTime.getDate();\r\n\tvar currentDay =  DAYSOFWEEK[currentDateTime.getDay()];\r\n\r\n\tif (currentDateTime.getHours() < 12) {\r\n\t\tcurrentTimePeriod = \"Morning\";\r\n\t} else if (currentDateTime.getHours() >= 12 && currentDateTime.getHours() <= 17) {\r\n\t\tcurrentTimePeriod = \"Afternoon\";\r\n\t} else if (currentDateTime.getHours() > 17 && currentDateTime.getHours() <= 20) {\r\n\t\tcurrentTimePeriod = \"Evening\";\r\n\t} else if(currentDateTime.getHours() > 20 && currentDateTime.getHours() <= 24) {\r\n\t\tcurrentTimePeriod = \"Night\";\r\n\t}\r\n\r\n\tif (window.Krux) {\r\n\t\tif(currentDateOfMonth) {Krux('set','user_attr_visitor_date_of_month', currentDateOfMonth)}\r\n\t\tif(currentDay) {Krux('set', 'user_attr_visitor_day_of_week', currentDay)}\r\n\t\tif(currentTimePeriod) {Krux('set', 'user_attr_visitor_time_of_day', currentTimePeriod)}\r\n\t}\r\n}());\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 44841, "name": "Dayparting Tag"}, {"content": "<script>\r\n(function()\r\n{ var i = new Image(); i.src = '//match.adsrvr.org/track/cmf/generic?ttd_pid=krux&ttd_tpi=1'; }\r\n)();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 43624, "name": "The Trade Desk"}, {"content": "<script>\r\n// Data Transfer Code for E*TRADE\r\n(function() {\r\n    var site; // contains the type of site within E*TRADE\r\n    // if hostname is 'express.etrade.com' it is an application site\r\n    if (window.location.hostname == 'express.etrade.com') { site = 'application'; }\r\n    // if hostname is not the application but the pathname contains '/e/t/' then it is customer site\r\n    else if (window.location.pathname.indexOf('\\/e\\/t') > -1) { site = 'customer'; }\r\n    // if it isn't one of the above it is the prospect site, default to that\r\n    else { site ='prospect'; } //default to prospect site\r\n    // Using Meta keywords and description to produce page attribute keywords and description\r\n    Krux('scrape', {'page_attr_keywords': {meta_name:'keywords'}});\r\n    Krux('scrape', {'page_attr_description': {meta_name:'description'}});\r\n    // User is logged in if a logout button is displayed\r\n    // or if they are visting the applicaiton.\r\n    var isPrefilled = ( site == 'application' ) ? ( window.location.pathname.split( '/' )[2].indexOf( 'prefilled' ) != -1 ) : false;\r\n    var logged_in = ( document.getElementsByClassName( 'logout' ).length > 0 || isPrefilled ) ? true : false;\r\n    Krux('set', {'page_attr_logged_in': logged_in});\r\n    if (site == 'application') {\r\n        Krux ('scrape', {'page_attr_url_path_2':{url_path: '2'}})\r\n        // Gets url path, splits on - and gets the value of the product being applied for\r\n        // and signals that the user has started an OLA application\r\n        if (window.pageName && window.pageName.indexOf('step1start-') !== -1) {\r\n            var productType = window.pageName.replace('step1start-','');\r\n            if(productType) Krux('admEvent','JoR9OprM',{prod_type: productType});\r\n        }\r\n        // if step5complete is found in the URL, it is the confirmation step, fire conversion event with product name\r\n        else if (window.pageName && window.pageName.indexOf('step5complete-') !== -1) {\r\n            var productType = window.pageName.replace('step5complete-','');\r\n            if(productType) Krux('admEvent','Jmjy9VyP',{prod_type:productType});\r\n        }\r\n    } else if (site == 'prospect') {\r\n        // Using UrlPath 1 to produce page attribute url_path_1\r\n        Krux('scrape', {'page_attr_url_path_1':{url_path: '1'}});\r\n        if (typeof Krux('get', 'page_attr_url_path_1') != 'undefined')\r\n            Krux('set', {section: Krux('get','page_attr_url_path_1')});\r\n        Krux('scrape', {'page_attr_url_path_2':{url_path: '2'}});\r\n        if (typeof Krux('get','page_attr_url_path_2') != 'undefined')\r\n            Krux('set', {subsection: Krux('get','page_attr_url_path_2')});\r\n        if (Krux('get', 'page_attr_url_path_1') == 'customer-service') {\r\n            var chatLink = Krux('require:sizzle').find('.chat-border span a')[0];\r\n            if (typeof chatLink !== 'undefined') {\r\n                // if the chat link exists, if clicked, set as chat user\r\n                chatLink.addEventListener('click',\r\n                function() {\r\n                    // set as chat user\r\n                    Krux('set', {'user_attr_chat_user': 'chat user'});\r\n                    Krux('page:load', function(err) { }, {pageView: false });\r\n                });\r\n            }\r\n        }\r\n        // Get media attribute\r\n        if (window.s && window.s['prop30'] && window.s['prop30'] !== '') {\r\n            Krux('set', {'user_attr_campaign_channel': window.s['prop30'] });\r\n        }\r\n        // Get campaign type\r\n        // 'ext:P_google__60DAY600' or 'int:sc:S118501' is expected value for window.s['prop15']\r\n        if (window.s && window.s['prop15'] && window.s.prop15 !== '') {\r\n            if (window.s['prop15'].match(/ext/gi)) { // if external, set type\r\n                Krux('set','user_attr_campaign_type',window.s['prop15'].split(':')[1]);\r\n            } else if (window.s['prop15'].match(/int/gi)) { // if internal, set type\r\n                Krux('set','user_attr_campaign_type',window.s['prop15'].split(':')[2]);\r\n            }\r\n        }\r\n    } else if (site == 'customer')  {\r\n        // Scrape customer ID\r\n        var customerId;\r\n        if (typeof prop_aat_id !== 'undefined') {\r\n            customerId = prop_aat_id;\r\n            Krux('set', {'user_attr_customerId': customerId})\r\n        }\r\n        // Scrape customer cookie values (split on space)\r\n        var x, b, s;\r\n        var scrapeObj = {};\r\n        var customerCookie, customerCookieName, customerCookieValue;\r\n        s = 'et_segment';\r\n        b  = document.cookie;\r\n        customerCookie = b && (b = b.match(\"\\\\b\" + s + \"=([^;]*)\"))\r\n            && decodeURIComponent(b[1]);\r\n        if (typeof customerCookie !== 'undefined') {\r\n            // Customer cookie should be len 7, but either way, always loop through\r\n            // splitting on '-' and assigning each to a k-v pair\r\n            customerCookie = customerCookie.split('\\ ');\r\n            if (customerCookie.length > 1) {\r\n                for (x = 0; x < customerCookie.length; x++) {\r\n                    customerCookieName = 'user_attr_' + customerCookie[x].split('\\-')[0];\r\n                    customerCookieValue = customerCookie[x].split('\\-')[1];\r\n                    scrapeObj[customerCookieName] = customerCookieValue;\r\n                }\r\n            }\r\n            Krux('set',scrapeObj)\r\n        }\r\n    }\r\n    // Set referring campaign\r\n    if (window.s && window.s.campaign) {\r\n        Krux('set','page_attr_omniture_campaign',window.s.campaign);\r\n    }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 44400, "name": "Krux Data Transfer Code"}, {"content": "<script>\r\n    (function() {\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n            var kurl_params = encodeURIComponent(\"_kuid=\" + kuid + \"&_kdpid=2dd640a6-6ebd-4d4f-af30-af8baa441a0d&dlxid=<na_id>&dlxdata=<na_da>\");\r\n            var kurl = prefix + \"//beacon.krxd.net/data.gif?\" + kurl_params;\r\n            var dlx_url = '//r.nexac.com/e/getdata.xgi?dt=br&pkey=gpwn29rvapq62&ru=' + kurl;\r\n            var i = new Image();\r\n            i.src = dlx_url;\r\n        }\r\n    })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 8, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "data provider", "id": 42149, "name": "DataLogix provider tag"}, {"content": "<script>\r\n(function() {\r\n    var prefix = 'https:';\r\n    var rurl = prefix + '//cms.analytics.yahoo.com/cms?partner_id=KRUX';\r\n    var i = new Image();\r\n    i.src = rurl;\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 43718, "name": "Yahoo! DataX"}, {"content": "<script>\r\n(function(){\r\n     var kuid = Krux('get', 'user');\r\n     if (kuid) {\r\n         var prefix = 'https:';\r\n         var r_url = prefix + '//tacoda.at.atwola.com/atx/sync/uskrux/uskrx/'\r\n         var kurl = r_url + kuid;\r\n         var i = new Image();\r\n         i.src = kurl;\r\n     }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 44005, "name": "AOL user match"}], "buckets": [], "publisher": {"uuid": "738a3aa1-2ab6-4719-9421-1b043f034635", "id": 12363, "name": "E*TRADE - ReadOnly"}, "controltag_options": {"async": "true", "render": true}, "site": {"id": 19426, "name": "E*TRADE"}, "realtime_segments": [], "dnt": null, "params": {"connector_host": "connector.krxd.net", "first_party_uid": false, "control_tag_load_sync": "false", "userData_host": "cdn.krxd.net", "disable_http_compression": false, "remove_kxhead": true, "supertag_requires_approval": false, "control_tag_namespace": "etrade", "control_tag_stats_prefix": null, "beacon_host": "beacon.krxd.net", "control_tag_pixel_throttle": "100", "store_realtime_segments": false, "user_id_cookie": null, "max_segments": null, "no_pii": 0, "recommend": "false", "revenue_optimization": false, "context_terms": "false", "jslog_host": "jslog.krxd.net", "buckets": "", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "fingerprint": false, "config_source": 1, "control_tag_version": "stable", "capture_js_errors": "true", "datatag_version": "3", "dfp_premium": "true", "userdata_host": "cdn.krxd.net", "target_fingerprint": false}, "services": {"event": "//beacon.krxd.net/event.gif", "impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "log": "//jslog.krxd.net/jslog.gif", "optout": "//beacon.krxd.net/optout_check", "um": "//apiservices.krxd.net/um", "pixel": "//beacon.krxd.net/pixel.gif", "contentConnector": "//connector.krxd.net/content_connector/", "is_optout": "//beacon.krxd.net/optout_check", "set_optin": "//apiservices.krxd.net/consumer/optin", "social": "//beacon.krxd.net/social.gif", "set_optout": "//apiservices.krxd.net/consumer/optout", "userData": "//cdn.krxd.net/userdata/get", "data": "//beacon.krxd.net/data.gif", "userdata": "//cdn.krxd.net/userdata/get", "addSegment": "//cdn.krxd.net/userdata/add"}, "geo": {}, "segments": [], "confid": "JfvWH-9Z"};

  // Wrap in a function and comment, then toString the func and replace
  // everything that's not the beginning or end of a JSON object, so we get a
  // string that's either empty or JSON.
  var esiGeo = String(function(){/*
    <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = window.JSON.parse(esiGeo);
    } catch (__) {
      // Couldn't parse, so setting to {}
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }

  
  
  

  load('//cdn.krxd.net/ctjs/controltag.js.875fd5b280a77e06def8c74a5a268e2c', function() {
    
    
    log('Loading krux configuration.');

    Krux('config', config);

    
  });
})();
