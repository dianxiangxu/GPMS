<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
   <title>Chapter&nbsp;3.&nbsp;JAX-RS Application, Resources and Sub-Resources</title><link rel="stylesheet" type="text/css" href="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/documentation.css"><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"><link rel="home" href="https://jersey.java.net/documentation/latest/index.html" title="Jersey 2.19 User Guide"><link rel="up" href="https://jersey.java.net/documentation/latest/index.html" title="Jersey 2.19 User Guide"><link rel="prev" href="https://jersey.java.net/documentation/latest/modules-and-dependencies.html" title="Chapter&nbsp;2.&nbsp;Modules and dependencies"><link rel="next" href="https://jersey.java.net/documentation/latest/deployment.html" title="Chapter&nbsp;4.&nbsp;Application Deployment and Runtime Environments"><script src="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript">
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-3160303-1']);
            _gaq.push(['_trackPageview']);

            (function() {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();
        </script></head><body class="contents"><div class="contents" bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="navheader"><table summary="Navigation header" width="100%"><tbody><tr><th colspan="3" align="center">Chapter&nbsp;3.&nbsp;JAX-RS Application, Resources and Sub-Resources</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="https://jersey.java.net/documentation/latest/modules-and-dependencies.html">Prev</a>&nbsp;</td><th align="center" width="60%">&nbsp;</th><td align="right" width="20%">&nbsp;<a accesskey="n" href="https://jersey.java.net/documentation/latest/deployment.html">Next</a></td></tr></tbody></table><hr></div><div style="float:right"><a href="https://jersey.java.net/"><img src="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/jersey_logo.png"></a></div><small>Links:
            <a href="https://jersey.java.net/documentation/latest/index.html">
                Table of Contents
            </a> | <a href="https://jersey.java.net/documentation/latest/user-guide.html">
                Single HTML
            </a></small><div class="chapter" lang="en"><div class="titlepage"><div><div><h1 class="title"><a name="jaxrs-resources"></a>Chapter&nbsp;3.&nbsp;JAX-RS Application, Resources and Sub-Resources</h1></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl class="toc"><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e1922">3.1. Root Resource Classes</a></span></dt><dd><dl><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e1961">3.1.1. @Path</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2011">3.1.2. @GET, @PUT, @POST, @DELETE, ... (HTTP Methods)</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2049">3.1.3. @Produces</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2128">3.1.4. @Consumes</a></span></dt></dl></dd><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2153">3.2. Parameter Annotations (@*Param)</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2424">3.3. Sub-resources</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2571">3.4. Life-cycle of Root Resource Classes</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2642">3.5. Rules of Injection</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2750">3.6. Use of @Context</a></span></dt><dt><span class="section"><a href="https://jersey.java.net/documentation/latest/jaxrs-resources.html#d0e2778">3.7. Programmatic resource model</a></span></dt></dl></div><p>This chapter presents an overview of the core JAX-RS concepts - resources and sub-resources.</p><p>The JAX-RS 2.0 JavaDoc can be found online <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html" target="_top">here</a>.
    </p><p>The JAX-RS 2.0 specification draft can be found online <a class="link" href="http://jcp.org/en/jsr/summary?id=339" target="_top">here</a>.
    </p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e1922"></a>3.1.&nbsp;Root Resource Classes</h2></div></div></div><p>
            <span class="emphasis"><em>Root resource classes</em></span>
            are POJOs (Plain Old Java Objects) that are annotated with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a>
            have at least one method annotated with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> or a resource method designator annotation such as <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/GET.html" target="_top">@GET</a>,
            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PUT.html" target="_top">@PUT</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/POST.html" target="_top">@POST</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/DELETE.html" target="_top">@DELETE</a>. Resource methods are methods of a resource class annotated with a resource
            method designator. This section shows how to use Jersey to annotate Java objects to create RESTful web services.
        </p><p>The following code example is a very simple example of a root
            resource class using JAX-RS annotations. The example code shown here is
            from one of the samples that ships with Jersey, the zip file of which can
            be found in the maven repository
            <a class="link" href="https://maven.java.net/content/repositories/releases/org/glassfish/jersey/examples/helloworld/2.19/" target="_top">here</a>.
        </p><p>
            </p><div class="example"><a name="d0e1955"></a><p class="title"><b>Example&nbsp;3.1.&nbsp;Simple hello world root resource class</b></p><div class="example-contents"><div><div id="highlighter_923579" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">package</code> <code class="java plain">org.glassfish.jersey.examples.helloworld;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.ws.rs.GET;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.ws.rs.Path;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">javax.ws.rs.Produces;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"helloworld"</code><code class="java plain">)</code></div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">HelloWorldResource {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">String CLICHED_MESSAGE = </code><code class="java string">"Hello World!"</code><code class="java plain">;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@GET</code></div><div class="line number12 index11 alt1"><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"text/plain"</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String getHello() {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">CLICHED_MESSAGE;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
            Let's look at some of the JAX-RS annotations used in this example.
        </p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="d0e1961"></a>3.1.1.&nbsp;@Path</h3></div></div></div><p>The <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> annotation's value is a relative URI path. In the example above, the Java class will be hosted at the URI path
                <code class="literal">/helloworld</code>. This is an extremely simple use of the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> annotation. What makes JAX-RS so useful is that you can embed variables in the URIs.
            </p><p>
                <span class="emphasis"><em>URI path templates</em></span>
                are URIs with variables embedded within the URI syntax. 
These variables are substituted at runtime in order for a resource to 
respond to a request based on the substituted URI. Variables are denoted
 by curly braces. For example, look at the following <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> annotation:

                </p><div><div id="highlighter_633472" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/users/{username}"</code><code class="java plain">)</code></div></div></td></tr></tbody></table></div></div><p>

                In this type of example, a user will be prompted to 
enter their name, and then a Jersey web service configured to respond to
 requests to this URI path template will respond. For example, if the 
user entered their username as "Galileo", the web service will respond 
to the following URL:
                <code class="literal">http://example.com/users/Galileo</code>
            </p><p>To obtain the value of the username variable the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PathParam.html" target="_top">@PathParam</a> may be used on method parameter of a request method, for example:
                </p><div class="example"><a name="d0e1994"></a><p class="title"><b>Example&nbsp;3.2.&nbsp;Specifying URI path parameter</b></p><div class="example-contents"><div><div id="highlighter_958706" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/users/{username}"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">UserResource {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"text/xml"</code><code class="java plain">)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String getUser(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"username"</code><code class="java plain">) String userName) {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
                If it is required that a user name must only consist of
                lower and upper case numeric characters then it is possible to declare a
                particular regular expression, which overrides the default regular
                expression, "[^/]+", for example:
                </p><div><div id="highlighter_577575" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"users/{username: [a-zA-Z][a-zA-Z_0-9]*}"</code><code class="java plain">)</code></div></div></td></tr></tbody></table></div></div><p>
                In this type of example the username variable will only 
match user names that begin with one upper or lower case letter and zero
 or more alpha numeric characters and the underscore character. If a 
user name does not match that a 404 (Not Found) response will occur.
            </p><p>A <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> value may or may not begin with a '/', it makes no difference. Likewise, by default, a <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> value may or may not end in a '/', it makes no difference, and thus request URLs that end or do not end in a '/' will both
                be matched.
            </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="d0e2011"></a>3.1.2.&nbsp;@GET, @PUT, @POST, @DELETE, ... (HTTP Methods)</h3></div></div></div><p><a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/GET.html" target="_top">@GET</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PUT.html" target="_top">@PUT</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/POST.html" target="_top">@POST</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/DELETE.html" target="_top">@DELETE</a> and <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/HEAD.html" target="_top">@HEAD</a>
                are
                <span class="emphasis"><em>resource method designator</em></span>
                annotations defined
                by JAX-RS and which correspond to the similarly named HTTP methods. In
                the example above, the annotated Java method will process HTTP GET
                requests. The behavior of a resource is determined by which of the HTTP
                methods the resource is responding to.
            </p><p>The following example is an extract from the storage service
                sample that shows the use of the PUT method to create or update a
                storage container:
            </p><p>
                </p><div class="example"><a name="d0e2037"></a><p class="title"><b>Example&nbsp;3.3.&nbsp;PUT method</b></p><div class="example-contents"><div><div id="highlighter_182020" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@PUT</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java plain">Response putContainer() {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"PUT CONTAINER "</code> <code class="java plain">+ container);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">URI uri = uriInfo.getAbsolutePath();</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Container c = </code><code class="java keyword">new</code> <code class="java plain">Container(container, uri.toString());</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Response r;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(!MemoryStore.MS.hasContainer(c)) {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">r = Response.created(uri).build();</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">r = Response.noContent().build();</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MemoryStore.MS.createContainer(c);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">r;</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
                By default the JAX-RS runtime will automatically support the methods HEAD and OPTIONS, if not explicitly
                implemented. For HEAD the runtime will invoke the implemented GET method (if present) and ignore the
                response entity (if set). A response returned for the OPTIONS method depends on the requested media type
                defined in the 'Accept' header. The OPTIONS method can return a response with a set of supported
                resource methods in the 'Allow' header or return
                a <a class="link" href="http://wadl.java.net/" target="_top">WADL</a> document.
                See <a class="link" href="https://jersey.java.net/documentation/latest/wadl.html" title="Chapter&nbsp;17.&nbsp;WADL Support">wadl section</a> for more information.
            </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="d0e2049"></a>3.1.3.&nbsp;@Produces</h3></div></div></div><p>
                The <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Produces.html" target="_top">@Produces</a> annotation is used to specify the MIME media types of representations a resource can
                produce and send back to the client. In this example, the Java method will produce representations identified
                by the MIME media type "text/plain". <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Produces.html" target="_top">@Produces</a> can be applied at both the class and method levels.
                Here's an example:
            </p><p>
                </p><div class="example"><a name="d0e2062"></a><p class="title"><b>Example&nbsp;3.4.&nbsp;Specifying output MIME type</b></p><div class="example-contents"><div><div id="highlighter_148287" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/myResource"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"text/plain"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">SomeResource {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String doGetAsPlainText() {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"text/html"</code><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String doGetAsHtml() {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
                The
                <code class="literal">doGetAsPlainText</code>
                method defaults to the MIME type of the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Produces.html" target="_top">@Produces</a> annotation at the class level. The
                <code class="literal">doGetAsHtml</code>
                method's <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Produces.html" target="_top">@Produces</a> annotation overrides the class-level <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Produces.html" target="_top">@Produces</a> setting, and specifies that the
                method can produce HTML rather than plain text.
            </p><p>If a resource class is capable of producing more that one MIME
                media type then the resource method chosen will correspond to the most
                acceptable media type as declared by the client. More specifically the
                Accept header of the HTTP request declares what is most acceptable. For
                example if the Accept header is "<code class="literal">Accept: text/plain</code>" then the
                <code class="literal">doGetAsPlainText</code>
                method will be invoked.
                Alternatively if the Accept header is "
                <code class="literal">Accept: text/plain;q=0.9, text/html</code>", which declares that the client can accept media types of
                "text/plain" and "text/html" but prefers the latter, then the
                <code class="literal">doGetAsHtml</code>
                method will be invoked.
            </p><p>More than one media type may be declared in the same <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Produces.html" target="_top">@Produces</a> declaration, for example:
            </p><p>
                </p><div class="example"><a name="d0e2104"></a><p class="title"><b>Example&nbsp;3.5.&nbsp;Using multiple output MIME types</b></p><div class="example-contents"><div><div id="highlighter_704546" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@GET</code></div><div class="line number2 index1 alt1"><code class="java color1">@Produces</code><code class="java plain">({</code><code class="java string">"application/xml"</code><code class="java plain">, </code><code class="java string">"application/json"</code><code class="java plain">})</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java plain">String doGetAsXmlOrJson() {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
                The
                <code class="literal">doGetAsXmlOrJson</code>
                method will get
                invoked if either of the media types "application/xml" and
                "application/json" are acceptable. If both are equally acceptable then
                the former will be chosen because it occurs first.
            </p><p>Optionally, server can also specify the quality factor for individual media types. These are
                considered if several are equally acceptable by the client. For example:</p><p>
                </p><div class="example"><a name="d0e2117"></a><p class="title"><b>Example&nbsp;3.6.&nbsp;Server-side content negotiation</b></p><div class="example-contents"><div><div id="highlighter_244592" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@GET</code></div><div class="line number2 index1 alt1"><code class="java color1">@Produces</code><code class="java plain">({</code><code class="java string">"application/xml; qs=0.9"</code><code class="java plain">, </code><code class="java string">"application/json"</code><code class="java plain">})</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java plain">String doGetAsXmlOrJson() {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
                In the above sample, if client accepts both "application/xml" and "application/json" (equally),
                then a server always sends "application/json", since "application/xml" has a lower quality factor.
            </p><p>The examples above refers explicitly to MIME media types for
                clarity. It is possible to refer to constant values, which may reduce
                typographical errors, see the constant field values of <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/MediaType.html" target="_top">MediaType</a>.
            </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="d0e2128"></a>3.1.4.&nbsp;@Consumes</h3></div></div></div><p>The <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Consumes.html" target="_top">@Consumes</a> annotation is used to specify the MIME media types of representations
                that can be consumed by a resource. The above example can be modified to set the cliched
                message as follows:
            </p><p>
                </p><div class="example"><a name="d0e2138"></a><p class="title"><b>Example&nbsp;3.7.&nbsp;Specifying input MIME type</b></p><div class="example-contents"><div><div id="highlighter_855812" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@POST</code></div><div class="line number2 index1 alt1"><code class="java color1">@Consumes</code><code class="java plain">(</code><code class="java string">"text/plain"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">postClichedMessage(String message) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Store the message</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
            </p><p>In this example, the Java method will consume representations
                identified by the MIME media type "text/plain". Notice that the resource
                method returns void. This means no representation is returned and
                response with a status code of 204 (No Content) will be returned to the client.
            </p><p><a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Consumes.html" target="_top">@Consumes</a> can be applied at both the class and the method levels and more than one media type
                may be declared in the same <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Consumes.html" target="_top">@Consumes</a> declaration.
            </p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e2153"></a>3.2.&nbsp;Parameter Annotations (@*Param)</h2></div></div></div><p>Parameters of a resource method may be annotated with parameter-based annotations to extract information
            from a request. One of the previous examples presented the use of <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PathParam.html" target="_top">@PathParam</a> to extract a path
            parameter from the path component of the request URL that matched the path declared in <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a>.
        </p><p><a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/QueryParam.html" target="_top">@QueryParam</a> is used to extract query parameters from the Query component of the request URL.
            The following example is an extract from the sparklines sample:
        </p><div class="example"><a name="d0e2168"></a><p class="title"><b>Example&nbsp;3.8.&nbsp;Query parameters</b></p><div class="example-contents"><div><div id="highlighter_37076" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"smooth"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java color1">@GET</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java plain">Response smooth(</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"2"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"step"</code><code class="java plain">) </code><code class="java keyword">int</code> <code class="java plain">step,</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"true"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"min-m"</code><code class="java plain">) </code><code class="java keyword">boolean</code> <code class="java plain">hasMin,</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"true"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"max-m"</code><code class="java plain">) </code><code class="java keyword">boolean</code> <code class="java plain">hasMax,</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"true"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"last-m"</code><code class="java plain">) </code><code class="java keyword">boolean</code> <code class="java plain">hasLast,</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"blue"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"min-color"</code><code class="java plain">) ColorParam minColor,</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"green"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"max-color"</code><code class="java plain">) ColorParam maxColor,</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"red"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"last-color"</code><code class="java plain">) ColorParam lastColor) {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number12 index11 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><br class="example-break"><p>If a query parameter "step" exists in the query component of the
            request URI then the "step" value will be extracted and parsed as a
            32 bit signed integer and assigned to the step method parameter. If "step"
            does not exist then a default value of 2, as declared in the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/DefaultValue.html" target="_top">@DefaultValue</a>
            annotation, will be assigned to the step method parameter. If the "step"
            value cannot be parsed as a 32 bit signed integer then a HTTP 404 (Not
            Found) response is returned. User defined Java types such as
            <code class="literal">ColorParam</code>
            may be used, which as implemented as
            follows:
        </p><div class="example"><a name="d0e2181"></a><p class="title"><b>Example&nbsp;3.9.&nbsp;Custom Java type for consuming request parameters</b></p><div class="example-contents"><div><div id="highlighter_585687" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ColorParam </code><code class="java keyword">extends</code> <code class="java plain">Color {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ColorParam(String s) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">super</code><code class="java plain">(getRGB(s));</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java keyword">int</code> <code class="java plain">getRGB(String s) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(s.charAt(</code><code class="java value">0</code><code class="java plain">) == </code><code class="java string">'#'</code><code class="java plain">) {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code> <code class="java plain">{</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Color c = Color.decode(</code><code class="java string">"0x"</code> <code class="java plain">+ s.substring(</code><code class="java value">1</code><code class="java plain">));</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">c.getRGB();</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(NumberFormatException e) {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">throw</code> <code class="java keyword">new</code> <code class="java plain">WebApplicationException(</code><code class="java value">400</code><code class="java plain">);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code> <code class="java plain">{</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Field f = Color.</code><code class="java keyword">class</code><code class="java plain">.getField(s);</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">((Color)f.get(</code><code class="java keyword">null</code><code class="java plain">)).getRGB();</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(Exception e) {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">throw</code> <code class="java keyword">new</code> <code class="java plain">WebApplicationException(</code><code class="java value">400</code><code class="java plain">);</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><br class="example-break"><p>In general the Java type of the method parameter may:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>Be a primitive type;</p></li><li class="listitem"><p>Have a constructor that accepts a single
                    <code class="literal">String</code>
                    argument;
                </p></li><li class="listitem"><p>Have a static method named
                    <code class="literal">valueOf</code>
                    or
                    <code class="literal">fromString</code>
                    that accepts a single
                    <code class="literal">String</code>
                    argument (see, for example,
                    <code class="literal">Integer.valueOf(String)</code>
                    and <code class="literal">java.util.UUID.fromString(String)</code>);
                </p></li><li class="listitem"><p>Have a registered implementation of <code class="literal">javax.ws.rs.ext.ParamConverterProvider</code> JAX-RS
                    extension SPI that returns a <code class="literal">javax.ws.rs.ext.ParamConverter</code> instance capable of
                    a "from string" conversion for the type.
                     or
                </p></li><li class="listitem"><p>Be <code class="literal">List&lt;T&gt;</code>,
                    <code class="literal">Set&lt;T&gt;</code>
                    or
                    <code class="literal">SortedSet&lt;T&gt;</code>, where
                    <code class="literal">T</code>
                    satisfies 2 or 3 above. The resulting collection is read-only.
                </p></li></ol></div><p>Sometimes parameters may contain more than one value for the same
            name. If this is the case then types in 5) may be used to obtain all
            values.
        </p><p>If the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/DefaultValue.html" target="_top">@DefaultValue</a> is not used in conjunction with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/QueryParam.html" target="_top">@QueryParam</a>
            and the query parameter is not present in the request then value will be
            an empty collection for<code class="literal">List</code>, <code class="literal">Set</code> or <code class="literal">SortedSet</code>,
            <code class="literal">null</code> for other object types, and the Java-defined default for primitive types.
        </p><p>The <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PathParam.html" target="_top">@PathParam</a> and the other parameter-based annotations, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/MatrixParam.html" target="_top">@MatrixParam</a>,
            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/HeaderParam.html" target="_top">@HeaderParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/CookieParam.html" target="_top">@CookieParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/FormParam.html" target="_top">@FormParam</a> obey the same rules as <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/QueryParam.html" target="_top">@QueryParam</a>.
            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/MatrixParam.html" target="_top">@MatrixParam</a> extracts information from URL path segments. <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/HeaderParam.html" target="_top">@HeaderParam</a> extracts information
            from the HTTP headers. <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/CookieParam.html" target="_top">@CookieParam</a> extracts information from the cookies declared in cookie related HTTP
            headers.
        </p><p><a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/FormParam.html" target="_top">@FormParam</a> is slightly special because it extracts information from a request representation that
            is of the MIME media type
            <code class="literal">"application/x-www-form-urlencoded"</code>
            and conforms to the encoding
            specified by HTML forms, as described here. This parameter is very useful for extracting information that is
            POSTed by HTML forms, for example the following extracts the form parameter named "name" from the POSTed form
            data:
        </p><p>
            </p><div class="example"><a name="d0e2300"></a><p class="title"><b>Example&nbsp;3.10.&nbsp;Processing POSTed HTML form</b></p><div class="example-contents"><div><div id="highlighter_479780" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@POST</code></div><div class="line number2 index1 alt1"><code class="java color1">@Consumes</code><code class="java plain">(</code><code class="java string">"application/x-www-form-urlencoded"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">post(</code><code class="java color1">@FormParam</code><code class="java plain">(</code><code class="java string">"name"</code><code class="java plain">) String name) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Store the message</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>If it is necessary to obtain a general map of parameter name to
            values then, for query and path parameters it is possible to do the
            following:
        </p><p>
            </p><div class="example"><a name="d0e2310"></a><p class="title"><b>Example&nbsp;3.11.&nbsp;Obtaining general map of URI path and/or query parameters</b></p><div class="example-contents"><div><div id="highlighter_692553" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@GET</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java plain">String get(</code><code class="java color1">@Context</code> <code class="java plain">UriInfo ui) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MultivaluedMap&lt;String, String&gt; queryParams = ui.getQueryParameters();</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MultivaluedMap&lt;String, String&gt; pathParams = ui.getPathParameters();</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>For header and cookie parameters the following:</p><p>
            </p><div class="example"><a name="d0e2320"></a><p class="title"><b>Example&nbsp;3.12.&nbsp;Obtaining general map of header parameters</b></p><div class="example-contents"><div><div id="highlighter_932350" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@GET</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java plain">String get(</code><code class="java color1">@Context</code> <code class="java plain">HttpHeaders hh) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MultivaluedMap&lt;String, String&gt; headerParams = hh.getRequestHeaders();</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Map&lt;String, Cookie&gt; pathParams = hh.getCookies();</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>In general <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a> can be used to obtain contextual Java types related to the request or response.
        </p><p>Because form parameters (unlike others) are part of the message entity, it is possible to do the following:</p><p>
            </p><div class="example"><a name="d0e2335"></a><p class="title"><b>Example&nbsp;3.13.&nbsp;Obtaining general map of form parameters</b></p><div class="example-contents"><div><div id="highlighter_717227" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@POST</code></div><div class="line number2 index1 alt1"><code class="java color1">@Consumes</code><code class="java plain">(</code><code class="java string">"application/x-www-form-urlencoded"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">post(MultivaluedMap&lt;String, String&gt; formParams) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Store the message</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">

            I.e. you don't need to use the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a> annotation.
        </p><p>Another kind of injection is the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/BeanParam.html" target="_top">@BeanParam</a> which allows to inject the parameters described above into a
            single bean. A bean annotated with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/BeanParam.html" target="_top">@BeanParam</a> containing any fields and appropriate
            <code class="literal">*param</code>
            annotation(like <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PathParam.html" target="_top">@PathParam</a>)
 will be initialized with corresponding request values in expected way 
as if these
            fields were in the resource class. Then instead of injecting
 request values like path param into a constructor parameters
            or class fields the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/BeanParam.html" target="_top">@BeanParam</a> can be used to inject such a bean into a resource or resource method. The
            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/BeanParam.html" target="_top">@BeanParam</a> is used this way to aggregate more request parameters into a single bean.
        </p><div class="example"><a name="d0e2364"></a><p class="title"><b>Example&nbsp;3.14.&nbsp;Example of the bean which will be used as <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/BeanParam.html" target="_top">@BeanParam</a>
            </b></p><div class="example-contents"><div><div id="highlighter_501649" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">MyBeanParam {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"p"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String pathParam;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@MatrixParam</code><code class="java plain">(</code><code class="java string">"m"</code><code class="java plain">)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Encoded</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"default"</code><code class="java plain">)</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String matrixParam;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@HeaderParam</code><code class="java plain">(</code><code class="java string">"header"</code><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String headerParam;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String queryParam;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">MyBeanParam(</code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"q"</code><code class="java plain">) String queryParam) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.queryParam = queryParam;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String getPathParam() {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">pathParam;</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number23 index22 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><br class="example-break"><div class="example"><a name="d0e2372"></a><p class="title"><b>Example&nbsp;3.15.&nbsp;Injection of MyBeanParam as a method parameter:</b></p><div class="example-contents"><div><div id="highlighter_405647" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@POST</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">post(</code><code class="java color1">@BeanParam</code> <code class="java plain">MyBeanParam beanParam, String entity) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">final</code> <code class="java plain">String pathParam = beanParam.getPathParam(); </code><code class="java comments">// contains injected path parameter "p"</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><br class="example-break"><p>The example shows aggregation of injections <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PathParam.html" target="_top">@PathParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/QueryParam.html" target="_top">@QueryParam</a> <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/MatrixParam.html" target="_top">@MatrixParam</a>
            and <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/HeaderParam.html" target="_top">@HeaderParam</a> into one single bean. The rules for injections inside the bean are the same as described above
            for these injections. The <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/DefaultValue.html" target="_top">@DefaultValue</a> is used to define the default value for matrix parameter matrixParam.
            Also the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Encoded.html" target="_top">@Encoded</a> annotation has the same behaviour as if it were used for injection in the resource method
            directly. Injecting the bean parameter into @Singleton resource class fields is not allowed (injections into method
            parameter must be used instead).
        </p><p><a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/BeanParam.html" target="_top">@BeanParam</a> can contain all parameters injections injections
            (<a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/PathParam.html" target="_top">@PathParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/QueryParam.html" target="_top">@QueryParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/MatrixParam.html" target="_top">@MatrixParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/HeaderParam.html" target="_top">@HeaderParam</a>,
            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/CookieParam.html" target="_top">@CookieParam</a>, <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/FormParam.html" target="_top">@FormParam</a>).
 More
            beans can be injected into one resource or method parameters
 even if they inject the same request values. For example
            the following is possible:
        </p><div class="example"><a name="d0e2419"></a><p class="title"><b>Example&nbsp;3.16.&nbsp;Injection of more beans into one resource methods:</b></p><div class="example-contents"><div><div id="highlighter_90505" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@POST</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">post(</code><code class="java color1">@BeanParam</code> <code class="java plain">MyBeanParam beanParam, </code><code class="java color1">@BeanParam</code> <code class="java plain">AnotherBean anotherBean, </code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"p"</code><code class="java plain">) pathParam,</code></div><div class="line number3 index2 alt2"><code class="java plain">String entity) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// beanParam.getPathParam() == pathParam</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><br class="example-break"></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e2424"></a>3.3.&nbsp;Sub-resources</h2></div></div></div><p><a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> may be used on classes and such classes are referred to as root resource classes. <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a>
            may also be used on methods of root resource classes. This enables common functionality for a number of resources
            to be grouped together and potentially reused.
        </p><p>The first way <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> may be used is on resource methods and such methods are referred to as
            <span class="emphasis"><em>sub-resource methods</em></span>. The following example shows the method signatures for a root
            resource class from the jmaki-backend sample:
        </p><p>
            </p><div class="example"><a name="d0e2444"></a><p class="title"><b>Example&nbsp;3.17.&nbsp;Sub-resource methods</b></p><div class="example-contents"><div><div id="highlighter_422013" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Singleton</code></div><div class="line number2 index1 alt1"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/printers"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">PrintersResource {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">({</code><code class="java string">"application/json"</code><code class="java plain">, </code><code class="java string">"application/xml"</code><code class="java plain">})</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">WebResourceList getMyResources() { ... }</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code> <code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/list"</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">({</code><code class="java string">"application/json"</code><code class="java plain">, </code><code class="java string">"application/xml"</code><code class="java plain">})</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">WebResourceList getListOfPrinters() { ... }</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code> <code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/jMakiTable"</code><code class="java plain">)</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"application/json"</code><code class="java plain">)</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">PrinterTableModel getTable() { ... }</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code> <code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/jMakiTree"</code><code class="java plain">)</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"application/json"</code><code class="java plain">)</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TreeModel getTree() { ... }</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code> <code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/ids/{printerid}"</code><code class="java plain">)</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">({</code><code class="java string">"application/json"</code><code class="java plain">, </code><code class="java string">"application/xml"</code><code class="java plain">})</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Printer getPrinter(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"printerid"</code><code class="java plain">) String printerId) { ... }</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PUT</code> <code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/ids/{printerid}"</code><code class="java plain">)</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Consumes</code><code class="java plain">({</code><code class="java string">"application/json"</code><code class="java plain">, </code><code class="java string">"application/xml"</code><code class="java plain">})</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">putPrinter(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"printerid"</code><code class="java plain">) String printerId, Printer printer) { ... }</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DELETE</code> <code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/ids/{printerid}"</code><code class="java plain">)</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">deletePrinter(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"printerid"</code><code class="java plain">) String printerId) { ... }</code></div><div class="line number31 index30 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>If the path of the request URL is "printers" then the resource methods not annotated with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a>
            will be selected. If the request path of the request URL is "printers/list" then first the root resource class
            will be matched and then the sub-resource methods that match "list" will be selected, which in this case
            is the sub-resource method<code class="literal">getListOfPrinters</code>. So, in this example hierarchical matching
            on the path of the request URL is performed.
        </p><p>The second way <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> may be used is on methods
            <span class="bold"><strong>not</strong></span>
            annotated
            with resource method designators such as <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/GET.html" target="_top">@GET</a> or <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/POST.html" target="_top">@POST</a>. Such methods are referred to as
            <span class="emphasis"><em>sub-resource locators</em></span>. The following example shows the method signatures for
            a root resource class and a resource class from the optimistic-concurrency sample:
        </p><p>
            </p><div class="example"><a name="d0e2477"></a><p class="title"><b>Example&nbsp;3.18.&nbsp;Sub-resource locators</b></p><div class="example-contents"><div><div id="highlighter_391705" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/item"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemResource {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Context</code> <code class="java plain">UriInfo uriInfo;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"content"</code><code class="java plain">)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ItemContentResource getItemContentResource() {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">ItemContentResource();</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Produces</code><code class="java plain">(</code><code class="java string">"application/xml"</code><code class="java plain">)</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Item get() { ... }</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemContentResource {</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Response get() { ... }</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PUT</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"{version}"</code><code class="java plain">)</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">put(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"version"</code><code class="java plain">) </code><code class="java keyword">int</code> <code class="java plain">version,</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Context</code> <code class="java plain">HttpHeaders headers,</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">byte</code><code class="java plain">[] in) {</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>The root resource class
            <code class="literal">ItemResource</code>
            contains the
            sub-resource locator method
            <code class="literal">getItemContentResource</code>
            that
            returns a new resource class. If the path of the request URL is
            "item/content" then first of all the root resource will be matched, then
            the sub-resource locator will be matched and invoked, which returns an
            instance of the
            <code class="literal">ItemContentResource</code>
            resource class.
            Sub-resource locators enable reuse of resource classes. A method can be annotated with the
            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html" target="_top">@Path</a> annotation with empty path (<code class="literal">@Path("/")</code> or <code class="literal">@Path("")</code>) which
            means that the sub resource locator is matched for the path of the enclosing resource (without sub-resource path).
        </p><p>
            </p><div class="example"><a name="d0e2505"></a><p class="title"><b>Example&nbsp;3.19.&nbsp;Sub-resource locators with empty path</b></p><div class="example-contents"><div><div id="highlighter_352208" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/item"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemResource {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/"</code><code class="java plain">)</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ItemContentResource getItemContentResource() {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">ItemContentResource();</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>In the example above the sub-resource locator method <code class="literal">getItemContentResource</code>
            is matched for example for request path "/item/locator" or even for only "/item".
        </p><p>In addition the processing of resource classes returned by
            sub-resource locators is performed at runtime thus it is possible to
            support polymorphism. A sub-resource locator may return different
            sub-types depending on the request (for example a sub-resource locator
            could return different sub-types dependent on the role of the principle
            that is authenticated). So for example the following sub resource locator is valid:
        </p><p>
            </p><div class="example"><a name="d0e2520"></a><p class="title"><b>Example&nbsp;3.20.&nbsp;Sub-resource locators returning sub-type</b></p><div class="example-contents"><div><div id="highlighter_434699" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/item"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemResource {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/"</code><code class="java plain">)</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Object getItemContentResource() {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">AnyResource();</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>Note that the runtime will not manage the life-cycle or perform any
            field injection onto instances returned from sub-resource locator methods.
            This is because the runtime does not know what the life-cycle of the
            instance is. If it is required that the runtime manages the sub-resources
            as standard resources the <code class="literal">Class</code> should be returned
            as shown in the following example:
        </p><p>
            </p><div class="example"><a name="d0e2533"></a><p class="title"><b>Example&nbsp;3.21.&nbsp;Sub-resource locators created from classes</b></p><div class="example-contents"><div><div id="highlighter_417205" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">javax.inject.Singleton;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/item"</code><code class="java plain">)</code></div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemResource {</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"content"</code><code class="java plain">)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Class&lt;ItemContentSingletonResource&gt; getItemContentResource() {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">ItemContentSingletonResource.</code><code class="java keyword">class</code><code class="java plain">;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@Singleton</code></div><div class="line number12 index11 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemContentSingletonResource {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// this class is managed in the singleton life cycle</code></div><div class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>JAX-RS resources are managed in per-request scope by default which means that
            new resource is created for each request.
            In this example the <code class="literal">javax.inject.Singleton</code> annotation says
            that the resource will be managed as singleton and not in request scope.
            The sub-resource locator method returns a class which means that the runtime
            will managed the resource instance and its life-cycle. If the method would return instance instead,
            the <code class="literal">Singleton</code> annotation would have no effect and the returned instance
            would be used.
        </p><p>The sub resource locator can also return a <span class="emphasis"><em>programmatic resource model</em></span>. See <a class="link" href="https://jersey.java.net/documentation/latest/resource-builder.html" title="Chapter&nbsp;14.&nbsp;Programmatic API for Building Resources">resource builder section</a>
 for information of how the programmatic resource
            model is constructed. The following example shows very 
simple resource returned from the sub-resource locator method.
        </p><p>
            </p><div class="example"><a name="d0e2557"></a><p class="title"><b>Example&nbsp;3.22.&nbsp;Sub-resource locators returning resource model</b></p><div class="example-contents"><div><div id="highlighter_731038" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.glassfish.jersey.server.model.Resource;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"/item"</code><code class="java plain">)</code></div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ItemResource {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"content"</code><code class="java plain">)</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Resource getItemContentResource() {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">Resource.from(ItemContentSingletonResource.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>The code above has exactly the same effect as previous example. <code class="literal">Resource</code> is a resource
            simple resource constructed from <code class="literal">ItemContentSingletonResource</code>. More complex programmatic
            resource can be returned as long they are valid resources.
        </p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e2571"></a>3.4.&nbsp;Life-cycle of Root Resource Classes</h2></div></div></div><p>By default the life-cycle of root resource classes is per-request which,
            namely that a new instance of a root resource class is created every time
            the request URI path matches the root resource. This makes for a very
            natural programming model where constructors and fields can be utilized
            (as in the previous section showing the constructor of the
            <code class="literal">SparklinesResource</code>
            class) without concern for multiple
            concurrent requests to the same resource.
        </p><p>In general this is unlikely to be a cause of performance issues.
            Class construction and garbage collection of JVMs has vastly improved over
            the years and many objects will be created and discarded to serve and
            process the HTTP request and return the HTTP response.
        </p><p>Instances of singleton root resource classes can be declared by an instance of <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Application.html" target="_top">Application</a>.
        </p><p>Jersey supports two further life-cycles using Jersey specific annotations.</p><div class="table"><a name="d0e2588"></a><p class="title"><b>Table&nbsp;3.1.&nbsp;Resource scopes</b></p><div class="table-contents"><table summary="Resource scopes" border="1"><colgroup><col width="11%"><col width="11%"><col width="22%"><col width="56%"></colgroup><thead><tr><th>Scope</th><th>Annotation</th><th>Annotation full class name</th><th>Description</th></tr></thead><tbody><tr><td>Request scope</td><td>@RequestScoped (or none)</td><td>org.glassfish.jersey.process.internal.RequestScoped</td><td><span class="emphasis"><em>Default lifecycle </em></span>
 (applied when no annotation is present). In this scope
                            the resource instance is created for each 
new request and used for processing of this request. If the
                            resource is used more than one time in the 
request processing, always the same instance will be used.
                            This can happen when a resource is a sub 
resource is returned more times during the matching. In this
                            situation only on instance will server the 
requests.</td></tr><tr><td>Per-lookup scope</td><td>@PerLookup</td><td>org.glassfish.hk2.api.PerLookup</td><td>In this scope
                            the resource instance is created every time it is needed for the processing even it handles
                            the same request.</td></tr><tr><td>Singleton</td><td>@Singleton</td><td>javax.inject.Singleton</td><td>In this scope there is only one instance per jax-rs application. Singleton resource can be either
                            annotated with @Singleton and its class can be registered using the instance of
                            <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Application.html" target="_top">Application</a>. You can also create singletons by registering singleton instances
                            into <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Application.html" target="_top">Application</a>.</td></tr></tbody></table></div></div><br class="table-break"></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e2642"></a>3.5.&nbsp;Rules of Injection</h2></div></div></div><p>Previous sections have presented examples of annotated types, mostly
            annotated method parameters but also annotated fields of a class, for the
            injection of values onto those types.
        </p><p>This section presents the rules of injection of values on annotated
            types. Injection can be performed on fields, constructor parameters,
            resource/sub-resource/sub-resource locator method parameters and bean
            setter methods. The following presents an example of all such injection
            cases:
        </p><p>
            </p><div class="example"><a name="d0e2651"></a><p class="title"><b>Example&nbsp;3.23.&nbsp;Injection</b></p><div class="example-contents"><div><div id="highlighter_988395" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"{id:\\d+}"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">InjectedResource {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Injection onto field</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@DefaultValue</code><code class="java plain">(</code><code class="java string">"q"</code><code class="java plain">) </code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"p"</code><code class="java plain">)</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String p;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Injection onto constructor parameter</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">InjectedResource(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) </code><code class="java keyword">int</code> <code class="java plain">id) { ... }</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Injection onto resource method parameter</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String get(</code><code class="java color1">@Context</code> <code class="java plain">UriInfo ui) { ... }</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Injection onto sub-resource resource method parameter</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"sub-id"</code><code class="java plain">)</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String get(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"sub-id"</code><code class="java plain">) String id) { ... }</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Injection onto sub-resource locator method parameter</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"sub-id"</code><code class="java plain">)</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">SubResource getSubResource(</code><code class="java color1">@PathParam</code><code class="java plain">(</code><code class="java string">"sub-id"</code><code class="java plain">) String id) { ... }</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Injection using bean setter method</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@HeaderParam</code><code class="java plain">(</code><code class="java string">"X-header"</code><code class="java plain">)</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setHeader(String header) { ... }</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>There are some restrictions when injecting on to resource classes
            with a life-cycle of singleton scope. In such cases the class fields or
            constructor parameters cannot be injected with request specific parameters. So, for example
            the following is not allowed.</p><p>
            </p><div class="example"><a name="d0e2661"></a><p class="title"><b>Example&nbsp;3.24.&nbsp;Wrong injection into a singleton scope</b></p><div class="example-contents"><div><div id="highlighter_475507" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"resource"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java color1">@Singleton</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">class</code> <code class="java plain">MySingletonResource {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"query"</code><code class="java plain">)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String param; </code><code class="java comments">// WRONG: initialization of application will fail as you cannot</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// inject request specific parameters into a singleton resource.</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String get() {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"query param: "</code> <code class="java plain">+ param;</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>
            The example above will cause validation failure during application initialization as singleton
            resources cannot inject request specific parameters. The same example would fail if the query
            parameter would be injected into constructor parameter of such a singleton. In other words, if you
            wish one resource instance to server more requests (in the same time) it cannot be bound
            to a specific request parameter.
        </p><p>
            The exception exists for specific request objects which can injected even into
            constructor or class fields. For these objects the runtime will inject proxies
            which are able to simultaneously server more request. These request objects are
            <code class="literal">HttpHeaders</code>, <code class="literal">Request</code>, <code class="literal">UriInfo</code>,
            <code class="literal">SecurityContext</code>. These proxies can be injected using the <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a>
            annotation. The following example shows injection of proxies into the singleton resource class.
        </p><p>
            </p><div class="example"><a name="d0e2688"></a><p class="title"><b>Example&nbsp;3.25.&nbsp;Injection of proxies into singleton</b></p><div class="example-contents"><div><div id="highlighter_309854" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"resource"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java color1">@Singleton</code></div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">class</code> <code class="java plain">MySingletonResource {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Context</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Request request; </code><code class="java comments">// this is ok: the proxy of Request will be injected into this singleton</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">MySingletonResource(</code><code class="java color1">@Context</code> <code class="java plain">SecurityContext securityContext) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// this is ok too: the proxy of SecurityContext will be injected</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String get() {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"query param: "</code> <code class="java plain">+ param;</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>
            To summarize the injection can be done into the following constructs:
        </p><div class="table"><a name="d0e2696"></a><p class="title"><b>Table&nbsp;3.2.&nbsp;Overview of injection types</b></p><div class="table-contents"><table summary="Overview of injection types" border="1"><colgroup><col width="16%"><col width="84%"></colgroup><thead><tr><th>Java construct</th><th>Description</th></tr></thead><tbody><tr><td>Class fields</td><td>
                            Inject value directly into the field of the class. The field can be private
                            and must not be final. Cannot be used in Singleton scope except proxiable types mentioned above.
                        </td></tr><tr><td>Constructor parameters</td><td>
                            The constructor will be invoked with injected values. If more
                            constructors exists the one with the most injectable parameters will be invoked.
                            Cannot be used in Singleton scope except proxiable types mentioned above.
                        </td></tr><tr><td>Resource methods</td><td>
                            The resource methods (these annotated with @GET, @POST, ...) can contain
                            parameters that can be injected when the resource method is executed.
                            Can be used in any scope.
                        </td></tr><tr><td>Sub resource locators</td><td>
                            The sub resource locators (methods annotated with @Path but not @GET, @POST, ...)
                            can contain parameters that can be injected when the resource method is executed.
                            Can be used in any scope.
                        </td></tr><tr><td>Setter methods</td><td>
                            Instead of injecting values directly into field the value can be injected into the
                            setter method which will initialize the field. This injection can be used only with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a>
                            annotation. This means
                            it cannot be used for example for injecting of query params but it can be used for injections of
                            request. The setters will be called after the object creation and
                            only once. The name of the method does not necessary have a setter pattern. Cannot be used
                            in Singleton scope except proxiable types mentioned above.
                        </td></tr></tbody></table></div></div><br class="table-break"><p>
            The following example shows all possible java constructs into which the values can be injected.

            </p><div class="example"><a name="d0e2739"></a><p class="title"><b>Example&nbsp;3.26.&nbsp;Example of possible injections</b></p><div class="example-contents"><div><div id="highlighter_749916" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"resource"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">class</code> <code class="java plain">SummaryOfInjectionsResource {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"query"</code><code class="java plain">)</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String param; </code><code class="java comments">// injection into a class field</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String get(</code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"query"</code><code class="java plain">) String methodQueryParam) {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// injection into a resource method parameter</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"query param: "</code> <code class="java plain">+ param;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Path</code><code class="java plain">(</code><code class="java string">"sub-resource-locator"</code><code class="java plain">)</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Class&lt;SubResource&gt; subResourceLocator(</code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"query"</code><code class="java plain">) String subResourceQueryParam) {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// injection into a sub resource locator parameter</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">SubResource.</code><code class="java keyword">class</code><code class="java plain">;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">SummaryOfInjectionsResource(</code><code class="java color1">@QueryParam</code><code class="java plain">(</code><code class="java string">"query"</code><code class="java plain">) String constructorQueryParam) {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// injection into a constructor parameter</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Context</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setRequest(Request request) {</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// injection into a setter method</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(request != </code><code class="java keyword">null</code><code class="java plain">);</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number29 index28 alt2"><code class="java plain">}</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">class</code> <code class="java plain">SubResource {</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GET</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String get() {</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"sub resource"</code><code class="java plain">;</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number36 index35 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></div></div><p><br class="example-break">
        </p><p>The <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/FormParam.html" target="_top">@FormParam</a> annotation is special and may only be utilized on resource and sub-resource methods.
            This is because it extracts information from a request entity.
        </p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e2750"></a>3.6.&nbsp;Use of @Context</h2></div></div></div><p>Previous sections have introduced the use of <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a>. Chapter 5
            of the JAX-RS specification presents all the standard JAX-RS Java types that may be used with <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a>.
        </p><p>When deploying a JAX-RS application using servlet then
            <a class="link" href="http://docs.oracle.com/javaee/5/api/javax/servlet/ServletConfig.html" target="_top">ServletConfig</a>,
            <a class="link" href="http://docs.oracle.com/javaee/5/api/javax/servlet/ServletContext.html" target="_top">ServletContext</a>,
            <a class="link" href="http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletRequest.html" target="_top">HttpServletRequest</a>
            and
            <a class="link" href="http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletResponse.html" target="_top">HttpServletResponse</a>
            are available using <a class="link" href="http://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/core/Context.html" target="_top">@Context</a>.
        </p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e2778"></a>3.7.&nbsp;Programmatic resource model</h2></div></div></div><p>Resources can be constructed from classes or instances but also can be constructed from a programmatic resource
            model. Every resource created from from resource classes can also
            be constructed using the programmatic resource builder api. See <a class="link" href="https://jersey.java.net/documentation/latest/resource-builder.html" title="Chapter&nbsp;14.&nbsp;Programmatic API for Building Resources">resource builder section</a> for more information.
        </p></div></div><link href="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/shCore.css" rel="stylesheet" type="text/css"><link href="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/shThemeDefault.css" rel="stylesheet" type="text/css"><script src="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/shCore.js" type="text/javascript"></script><script src="Chapter%C2%A03.%C2%A0JAX-RS%20Application,%20Resources%20and%20Sub-Resources_files/shAutoloader.js" type="text/javascript"></script><script type="text/javascript">
            function path() {
              var args = arguments,
                  result = []
                  ;

              for(var i = 0; i < args.length; i++)
                  result.push(args[i].replace('@', 'https://jersey.java.net/sh/'));

              return result
            };

            SyntaxHighlighter.autoloader.apply(null, path(
              'applescript            @shBrushAppleScript.js',
              'actionscript3 as3      @shBrushAS3.js',
              'bash shell             @shBrushBash.js',
              'coldfusion cf          @shBrushColdFusion.js',
              'cpp c                  @shBrushCpp.js',
              'c# c-sharp csharp      @shBrushCSharp.js',
              'css                    @shBrushCss.js',
              'delphi pascal          @shBrushDelphi.js',
              'diff patch pas         @shBrushDiff.js',
              'erl erlang             @shBrushErlang.js',
              'groovy                 @shBrushGroovy.js',
              'java                   @shBrushJava.js',
              'jfx javafx             @shBrushJavaFX.js',
              'js jscript javascript  @shBrushJScript.js',
              'perl pl                @shBrushPerl.js',
              'php                    @shBrushPhp.js',
              'text plain             @shBrushPlain.js',
              'py python              @shBrushPython.js',
              'ruby rails ror rb      @shBrushRuby.js',
              'sass scss              @shBrushSass.js',
              'scala                  @shBrushScala.js',
              'sql                    @shBrushSql.js',
              'vb vbnet               @shBrushVb.js',
              'xml xhtml xslt html    @shBrushXml.js'
            ));

            SyntaxHighlighter.all();
        </script><div class="navfooter"><hr><table summary="Navigation footer" width="100%"><tbody><tr><td align="left" width="40%"><a accesskey="p" href="https://jersey.java.net/documentation/latest/modules-and-dependencies.html">Prev</a>&nbsp;</td><td align="center" width="20%">&nbsp;</td><td align="right" width="40%">&nbsp;<a accesskey="n" href="https://jersey.java.net/documentation/latest/deployment.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">Chapter&nbsp;2.&nbsp;Modules and dependencies&nbsp;</td><td align="center" width="20%"><a accesskey="h" href="https://jersey.java.net/documentation/latest/index.html">Home</a></td><td align="right" valign="top" width="40%">&nbsp;Chapter&nbsp;4.&nbsp;Application Deployment and Runtime Environments</td></tr></tbody></table></div></div></body></html>