	public ArrayList<UserInfo> findUsersForGrid(int offset, int limit,
			String userName, String college, String department,
			String positionType, String positionTitle, Boolean isActive)
			throws UnknownHostException {
		Datastore ds = getDatastore();
		ArrayList<UserInfo> users = new ArrayList<UserInfo>();

		// TODO: add filters based on attributes
		// Set UserAccount based on userName

		Query<UserProfile> q = ds.createQuery(UserProfile.class);

		if (userName != null) {
			List<UserAccount> userRef = ds.find(UserAccount.class)
					.field("username").contains(userName).asList();
			for (UserAccount userAccount : userRef) {
				q.field("user id").equal(userAccount);
			}
		}

		PositionDetails pd = new PositionDetails();

		if (college != null) {
			pd.setCollege(college);
			// q.field("details.college").hasThisElement(college);

			// ((FieldEnd<? extends Query<UserAccount>>) q).hasAllOf(q.field(
			// "details").hasThisElement(college));
		}
		if (department != null) {
			// pd.setDepartment(department);
			// q.field("details.department").hasThisElement(department);

			((FieldEnd<? extends Query<UserAccount>>) q).hasAllOf(q.field(
					"details.department").hasThisElement(department));
		}
		if (postitionType != null) {
			// pd.setPositionType(postitionType);
			// q.field("details.position type").hasThisElement(positionType);

			((FieldEnd<? extends Query<UserAccount>>) q).hasAllOf(q.field(
					"details.position type").hasThisElement(positionType));
		}
		if (positionTitle != null) {
			// pd.setPositionTitle(positionTitle);
			// q.field("details.position title").hasThisElement(positionTitle);

			((FieldEnd<? extends Query<UserAccount>>) q).hasAllOf(q.field(
					"details.position title").hasThisElement(positionTitle));
		}
		if (isActive != null) {
			// TODO: can we do with UserAccount "is deleted" rather than
			// UserProfile "is deleted"
			q.field("is deleted").equal(!isActive);
		}
		// q.field("details.college").hasThisOne(pd.getCollege());
		List<UserProfile> userProfiles = q.offset(offset).limit(limit).asList();
		// List<UserProfile> userProfiles = q.asList();
		int rowTotal = userProfiles.size();
		for (UserProfile userProfile : userProfiles) {
			UserInfo user = new UserInfo();
			user.setRowTotal(rowTotal);
			user.setId(userProfile.getId().toString());
			user.setUserName(userProfile.getUserAccount().getUserName());
			user.setFullName(userProfile.getFirstName() + " "
					+ userProfile.getMiddleName() + " "
					+ userProfile.getLastName());

			// TODO: TO bind the PI, Co-PI and Senior Proposal Count
			user.setNoOfPIedProposal(CountPIProposal(userProfile));
			user.setNoOfCoPIedProposal(CountCoPIProposal(userProfile));
			user.setNoOfSenioredProposal(CountSeniorProposal(userProfile));
			// Date today = Calendar.getInstance().getTime();
			//
			// SimpleDateFormat formatter = new SimpleDateFormat(
			// "yyyy-MM-dd hh.mm.ss");
			// String folderName = formatter.format(today);
			// // DateFormat dfm = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			// String d = formatter.parse(userProfile.getUserAccount()
			// .getAddedOn());
			//
			// user.setAddedOn(d);
			user.setAddedOn(userProfile.getUserAccount().getAddedOn());
			// TODO: get the lastUpdated for User here
			Date lastUpdated = userProfile.getAuditLog()
					.get(userProfile.getAuditLog().size() - 1)
					.getActivityDate();
			user.setLastUpdated(lastUpdated);

			user.setDeleted(userProfile.getUserAccount().isDeleted());
			users.add(user);
		}
		return users;
	}